<?php

namespace {{ namespace }};

use {{ namespacedRequests }}
use Closure;
use Inertia\Inertia;

use {{ namespacedModel }} as crudModel;
use Illuminate\Support\Str;
use Illuminate\Support\Arr;
use Exception;
use Illuminate\Support\Facades\DB;

class {{ class }} extends Controller
{
    public $name, $page, $prefix, $rules, $messages, $attributes, $permission;

    public function __construct(
    ) {
        $this->middleware(function (Request $request, Closure $next) {
            $this->name = Str::plural(Str::snake('{{ model }}')); //小駝峰 複數
            $this->page = 'Backend/'.Str::pluralStudly('{{ model }}'); //大駝峰 複數
            $this->prefix = 'backend'; //路由前綴

            $this->rules = [
                'name' => ['required']
            ];
            $this->messages = [

            ];

            $this->attributes = is_array(__("messages.{$this->name}")) ? Arr::dot(__("messages.{$this->name}")) : [];
            $this->permission = $this->name;

            return $next($request);
        });
    }

    /**
     * 列表顯示
     * @return Renderable
     */
    public function index(Request $request)
    {
        $this->authorize('read ' . $this->permission);
        $search_data = ['name'];

        $data = CrudModel::search($request->search, $search_data)
            ->orderByData($request->sortBy ?? 'updated_at', $request->sortOrder == 'ascending' ? 'asc' : 'desc')
            ->paginate($request->rows ?? 15)
            ->withQueryString();

        return Inertia::render($this->page.'/Index')->with([
            'data' => $data,
            'search_data' => $search_data,
        ]);
    }

    /**
     * 新增頁面
     * @return Renderable
     */
    public function create()
    {
        $this->authorize('create ' . $this->permission);

        $model = CrudModel::prototype();

        return Inertia::render($this->page.'/Show')->with([
            'model' => $model
        ]);
    }

    /**
     * 新增資料
     * @param Request $request
     * @return Renderable
     */
    public function store(Request $request)
    {
        $this->authorize('create ' . $this->permission);

        $validatedData = $request->validate($this->rules, $this->messages, $this->attributes);

        try{
            DB::beginTransaction();

            $data = CrudModel::create($this->translation($validatedData));

            DB::commit();

            return redirect()->route("{$this->prefix}.{$this->name}.index", $request->filters)->with([
                'success' => __('messages.create') . __('messages.success')
            ]);
        } catch (Exception $e) {
            report($e);
            DB::rollBack();

            return back()->with([
                'error' =>  $e->getMessage()
            ]);
        }
    }

    /**
     * 顯示該筆資料
     * @param int $id
     * @return Renderable
     */
    public function show($id)
    {
        $this->authorize('read ' . $this->permission);

        return $this->getData($id, true);
    }

    /**
     * 修改該筆資料
     * @param int $id
     * @return Renderable
     */
    public function edit($id)
    {
        $this->authorize('edit ' . $this->permission);

        return $this->getData($id);
    }

    /**
     * 抓取該筆資料
     * @param int $id
     * @return Renderable
     */
    public function getData($id, $show = false){
        $model = CrudModel::findOrFail($id);

        return Inertia::render($this->page.'/Show')->with([
            'model' => $model,
            'show' => $show
        ]);
    }


    /**
     * 更新該筆資料
     * @param Request $request
     * @param int $id
     * @return Renderable
     */
    public function update(Request $request, $id)
    {
        $this->authorize('edit ' . $this->permission);

        $validatedData = $request->validate($this->rules, $this->messages, $this->attributes);

        try{
            DB::beginTransaction();

            $data = CrudModel::findOrFail($id);
            $data->update($this->translation($validatedData));

            DB::commit();

            return redirect()->route("{$this->prefix}.{$this->name}.index", $request->filters)->with([
                'success' => __('messages.edit') . __('messages.success')
            ]);
        } catch (Exception $e) {
            report($e);
            DB::rollBack();

            return back()->with([
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * 刪除該筆資料
     * @param int $id
     * @return Renderable
     */
    public function destroy($id)
    {
        $this->authorize('delete ' . $this->permission);

        try{
            DB::beginTransaction();

            $data = CrudModel::findOrFail($id);
            $data->delete();

            DB::commit();

            return redirect()->route("{$this->prefix}.{$this->name}.index")->with([
                'success' => __('messages.delete').__('messages.success')
            ]);
        } catch (Exception $e) {
            report($e);
            DB::rollBack();

            return back()->with([
                'error' => $e->getMessage()
            ]);
        }
    }


    /**
     * 轉換資料
     * @param Array $data
     * @return Array
     */
    public function translation($data)
    {
        //轉換codeing

        return $data;
    }
}